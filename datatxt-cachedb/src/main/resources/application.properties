# Inventory Database
# NOTE:
# rotate the parts of the configuration file
# where defined "datasource*" and "cache.datasource"
# when testing locally accordingly to the host OS
# and/or in Docker container

# SQLite connection configuration
datasource.username =
datasource.password =
datasource.driver-class-name = org.sqlite.JDBC

# Interpolation
# NOTE: this area may have to be commented, 
# because it challenges and exposes insufficient capabilities of parser
# which will lead to runtime exceptions in the app
# NOTE: currently quite buggy
# will fail since custom interpolation does not count - as valid character
# extra_var = test-${datasource.driver-class-name}
# TODO: bug Exception in thread "main" java.lang.IllegalArgumentException: named capturing group is missing trailing '}' 
# extra_var = test-${cache.datasource.url}
extra_var = test-${datasource.filename}
basedir.linux = /var
logdir.linux = ${basedir.linux}/logs
# TODO: bug Exception in thread "main" java.lang.IllegalArgumentException: 
# No group with name {TEMP}
# basedir.windows = ${TEMP}
# TODO: bug Exception in thread "main" java.lang.IllegalArgumentException: 
# Illegal group reference
# basedir.windows = $TEMP
basedir.windows = c:\\temp
logdir.windows = ${basedir.windows}\\logs
x: a
y: ${x}b
# TODO: bug 
# Exception in thread "main" java.lang.IllegalArgumentException:
# No group with name {x}
z: ${y}c

basedir.windows = ${TEMP}
logdir.windows = ${TEMP}\\logs

datasource.filename = cache.db
# Docker
workdir = /demo
datasource.url = jdbc:sqlite:${workdir}/src/test/resources/${datasource.filename}
# Linux
datasource.url = jdbc:sqlite:${HOME}/${datasource.filename}
# Windows
datasource.url = jdbc:sqlite:${USERPROFILE}\\${datasource.filename}

# MySQL connection configuration

datasource.username = java
datasource.password = password
database=test
datasource.driver-class-name = com.mysql.cj.jdbc.Driver

# Docker
# jdbc.server = localhost
# Docker compose
# jdbc.server = mysql-server-alpine
jdbc.server = 192.168.0.29
jdbc.port = 3306
# TODO: test the arguments
# rewriteBatchedStatements=true is switching JDBC to send multirow inserts 
datasource.url=jdbc:mysql://${jdbc.server}:${jdbc.port}/${database} 

# Cache database

# SQLite connection configuration
# memory
cache.datasource.url = jdbc:sqlite::memory:

# MySQL connection configuration

datasource.username = java
datasource.password = password
database=test
datasource.driver-class-name = com.mysql.cj.jdbc.Driver

# Docker
# jdbc.server = localhost
# Docker compose
# jdbc.server = mysql-server-alpine
jdbc.server = 192.168.0.64
jdbc.port = 3306
# TODO: test the arguments
# rewriteBatchedStatements=true is switching JDBC to send multirow inserts
# Exception (ignored)invalid database address: jdbc:mysql://192.168.0.29:3306/test?useServerPrepStmts=false&rewriteBatchedStatements=true
#  
cache.datasource.url=jdbc:mysql://${jdbc.server}:${jdbc.port}/${database}?useServerPrepStmts=false&rewriteBatchedStatements=true
# ?useUnicode=true&characterEncoding=UTF-8&rewriteBatchedStatements=true
cache.datasource.url=jdbc:mysql://${jdbc.server}:${jdbc.port}/${database}


# TODO: H2 connection


package jpuppeteer.cdp.cdp.entity.input;

/**
*/
@lombok.Setter
@lombok.Getter
@lombok.ToString
public class DispatchKeyEventRequest {

    /**
    * Type of the key event.
    */
    private String type;

    /**
    * Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
    */
    private Integer modifiers;

    /**
    * Time at which the event occurred.
    */
    private Double timestamp;

    /**
    * Text as generated by processing a virtual key code with a keyboard layout. Not needed for for `keyUp` and `rawKeyDown` events (default: "")
    */
    private String text;

    /**
    * Text that would have been generated by the keyboard if no modifiers were pressed (except for shift). Useful for shortcut (accelerator) key handling (default: "").
    */
    private String unmodifiedText;

    /**
    * Unique key identifier (e.g., 'U+0041') (default: "").
    */
    private String keyIdentifier;

    /**
    * Unique DOM defined string value for each physical key (e.g., 'KeyA') (default: "").
    */
    private String code;

    /**
    * Unique DOM defined string value describing the meaning of the key in the context of active modifiers, keyboard layout, etc (e.g., 'AltGr') (default: "").
    */
    private String key;

    /**
    * Windows virtual key code (default: 0).
    */
    private Integer windowsVirtualKeyCode;

    /**
    * Native virtual key code (default: 0).
    */
    private Integer nativeVirtualKeyCode;

    /**
    * Whether the event was generated from auto repeat (default: false).
    */
    private Boolean autoRepeat;

    /**
    * Whether the event was generated from the keypad (default: false).
    */
    private Boolean isKeypad;

    /**
    * Whether the event was a system key event (default: false).
    */
    private Boolean isSystemKey;

    /**
    * Whether the event was from the left or right side of the keyboard. 1=Left, 2=Right (default: 0).
    */
    private Integer location;



}